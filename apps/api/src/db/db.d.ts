/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type MarketStatus = "active" | "cancelled" | "inactive" | "settled";

export type Numeric = ColumnType<string, number | string, number | string>;

export type OutcomeOption = "NO" | "YES";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type TradeTypeEnum = "BUY" | "SELL";

export type TransactionTypeEnum = "ADMIN_ADJUSTMENT" | "ADMIN_RESET" | "BUY" | "SELL" | "SETTLEMENT";

export interface Account {
  accessToken: string | null;
  accessTokenExpiresAt: Timestamp | null;
  accountId: string;
  createdAt: Timestamp;
  id: string;
  idToken: string | null;
  password: string | null;
  providerId: string;
  refreshToken: string | null;
  refreshTokenExpiresAt: Timestamp | null;
  scope: string | null;
  updatedAt: Timestamp;
  userId: string;
}

export interface GooseDbVersion {
  id: Generated<number>;
  is_applied: boolean;
  tstamp: Generated<Timestamp>;
  version_id: Int8;
}

export interface Markets {
  course_code: string;
  created_at: Generated<Timestamp>;
  description: string | null;
  exam_end_time: Timestamp;
  exam_name: string;
  exam_start_time: Timestamp;
  id: Generated<number>;
  liquidity: Generated<number>;
  resolved_outcome_id: string | null;
  status: Generated<MarketStatus>;
  title: string;
  updated_at: Generated<Timestamp>;
}

export interface Outcomes {
  created_at: Generated<Timestamp>;
  id: Generated<string>;
  market_id: number;
  outcome: OutcomeOption;
  shares: Generated<Numeric>;
  updated_at: Generated<Timestamp>;
}

export interface Positions {
  average_price_per_share: Int8;
  created_at: Generated<Timestamp>;
  id: Generated<string>;
  outcome_id: string;
  realized_pnl: Generated<Int8>;
  shares: Numeric;
  updated_at: Generated<Timestamp>;
  user_id: string;
}

export interface Session {
  createdAt: Timestamp;
  expiresAt: Timestamp;
  id: string;
  ipAddress: string | null;
  token: string;
  updatedAt: Timestamp;
  userAgent: string | null;
  userId: string;
}

export interface Trades {
  cost: Int8;
  created_at: Generated<Timestamp>;
  id: Generated<string>;
  outcome_id: string;
  price_per_share: Int8;
  shares: Numeric;
  trade_type: TradeTypeEnum;
  user_id: string;
}

export interface Transactions {
  amount: Int8;
  created_at: Generated<Timestamp>;
  id: Generated<string>;
  related_outcome_id: string | null;
  trade_id: string | null;
  transaction_type: TransactionTypeEnum;
  updated_at: Generated<Timestamp>;
  user_id: string;
}

export interface User {
  createdAt: Generated<Timestamp>;
  email: string;
  emailVerified: boolean;
  id: string;
  image: string | null;
  name: string;
  updatedAt: Generated<Timestamp>;
}

export interface Verification {
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: string;
  identifier: string;
  updatedAt: Generated<Timestamp | null>;
  value: string;
}

export interface Wallets {
  balance: Generated<Int8>;
  created_at: Generated<Timestamp>;
  id: Generated<string>;
  locked_balance: Generated<Int8>;
  updated_at: Generated<Timestamp>;
  user_id: string;
}

export interface DB {
  account: Account;
  goose_db_version: GooseDbVersion;
  markets: Markets;
  outcomes: Outcomes;
  positions: Positions;
  session: Session;
  trades: Trades;
  transactions: Transactions;
  user: User;
  verification: Verification;
  wallets: Wallets;
}
